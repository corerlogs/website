<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>内存泄漏 on 笔迹-工匠之芯</title><link>https://icorer.com/icorer_blog/tags/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/</link><description>Recent content in 内存泄漏 on 笔迹-工匠之芯</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 31 Jul 2018 09:11:18 +0800</lastBuildDate><atom:link href="https://icorer.com/icorer_blog/tags/%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F/index.xml" rel="self" type="application/rss+xml"/><item><title>检测并分析PHP扩展的内存泄露</title><link>https://icorer.com/icorer_blog/posts/detect-and-analyze-memory-leaks-in-php-extensions/</link><pubDate>Tue, 31 Jul 2018 09:11:18 +0800</pubDate><guid>https://icorer.com/icorer_blog/posts/detect-and-analyze-memory-leaks-in-php-extensions/</guid><description>1. 背景描述基于C/C++开发的程序，内存管理是很大程度上的工作，我们在这篇文章里来给大家讲解一下如何监控程序体可能存在的内存泄露。
工欲善其事必先利其器，这里选择使用 Valgrind 工作来进行内存监控。http://valgrind.org/
2. Valgrind工具安装1 git clone git://sourceware.org/git/valgrind.git 2 ./autogen.sh 3 ./configure --prefix=/usr/local/valgrind 4 make 5 make install 3. 测试命令样例1valgrind --tool=memcheck --leak-check=full --show-reachable=yes --trace-children=yes php PulseFlow.php 4. 一次针对PHP扩展的内存泄露检测过程针对已经开源的 PulseFLow 插件，今天我们将进行相关的内存泄露检测，由于我们是对PHP扩展进行泄露检查，所以：
第一步，需要给PHP打开debug 编译参数，相关的编译参数如 ./configure --enable-debug 。
第二步，我们需要关闭zend 内存管理 ，添加相关的环境变量 export USE_ZEND_ALLOC=0 export ZEND_DONT_UNLOAD_MODULES=1 第三步，我们执行相关命令
1ZEND_DONT_UNLOAD_MODULES=1 USE_ZEND_ALLOC=0 valgrind --tool=memcheck --leak-check=full --show-reachable=yes --trace-children=yes php PulseFlow.php 第四步，查看报告，获得总体报告如下
1==20296== LEAK SUMMARY: 2==20296== definitely lost: 0 bytes in 0 blocks 3==20296== indirectly lost: 0 bytes in 0 blocks 4==20296== possibly lost: 0 bytes in 0 blocks 5==20296== still reachable: 75,936 bytes in 29 blocks 6==20296== suppressed: 0 bytes in 0 blocks 5.</description></item></channel></rss>