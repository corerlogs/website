<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>epoll on 笔迹-工匠之芯</title><link>https://icorer.com/icorer_blog/tags/epoll/</link><description>Recent content in epoll on 笔迹-工匠之芯</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 08 Jun 2018 18:02:18 +0800</lastBuildDate><atom:link href="https://icorer.com/icorer_blog/tags/epoll/index.xml" rel="self" type="application/rss+xml"/><item><title>源码阅读：C语言epoll模型</title><link>https://icorer.com/icorer_blog/posts/source-code-reading-c-language-epoll-model/</link><pubDate>Fri, 08 Jun 2018 18:02:18 +0800</pubDate><guid>https://icorer.com/icorer_blog/posts/source-code-reading-c-language-epoll-model/</guid><description>背景epoll是Linux内核为处理大批量文件描述符而作了改进的poll，是Linux下多路复用IO接口select/poll的增强版本，它能显著提高程序在大量并发连接中只有少量活跃的情况下的系统CPU利用率。另一点原因就是获取事件的时候，它无须遍历整个被侦听的描述符集，只要遍历那些被内核IO事件异步唤醒而加入Ready队列的描述符集合就行了。epoll除了提供select/poll那种IO事件的水平触发（Level Triggered）外，还提供了边缘触发（Edge Triggered），这就使得用户空间程序有可能缓存IO状态，减少epoll_wait/epoll_pwait的调用，提高应用程序效率。
#模型代码 今天给大家分享一下EPOLL的相关模型代码：
服务端代码 1#include &amp;lt;sys/types.h&amp;gt; 2#include &amp;lt;sys/signalfd.h&amp;gt; 3#include &amp;lt;sys/epoll.h&amp;gt; 4#include &amp;lt;errno.h&amp;gt; 5#include &amp;lt;poll.h&amp;gt; 6#include &amp;lt;signal.h&amp;gt; 7#include &amp;lt;limits.h&amp;gt; 8#include &amp;lt;stdio.h&amp;gt; 9#include &amp;lt;stdlib.h&amp;gt; 10#include &amp;lt;unistd.h&amp;gt; 11#include &amp;lt;fcntl.h&amp;gt; 12#include &amp;lt;string.h&amp;gt; 13#include &amp;lt;assert.h&amp;gt; 14#include &amp;lt;sys/ioctl.h&amp;gt; 15#include &amp;lt;sys/socket.h&amp;gt; 16#include &amp;lt;netinet/in.h&amp;gt; 17#include &amp;lt;arpa/inet.h&amp;gt; 18#include &amp;#34;utarray.h&amp;#34; 19 20/***************************************************************************** 21 * This program demonstrates epoll-based event notification. It monitors for 22 * new client connections, input on existing connections or their closure, as 23 * well as signals.</description></item></channel></rss>