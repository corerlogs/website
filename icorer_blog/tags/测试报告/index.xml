<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>测试报告 on 笔迹-工匠之芯</title><link>https://icorer.com/icorer_blog/tags/%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A/</link><description>Recent content in 测试报告 on 笔迹-工匠之芯</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 03 Jul 2018 15:43:18 +0800</lastBuildDate><atom:link href="https://icorer.com/icorer_blog/tags/%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A/index.xml" rel="self" type="application/rss+xml"/><item><title>研究报告：JAVA 与 Golang 在 UDP服务器上的性能对比</title><link>https://icorer.com/icorer_blog/posts/performance-comparison-between-java-and-golang-on-udp-server/</link><pubDate>Tue, 03 Jul 2018 15:43:18 +0800</pubDate><guid>https://icorer.com/icorer_blog/posts/performance-comparison-between-java-and-golang-on-udp-server/</guid><description>背景介绍因工作需求，目前需要采用UDP协议来存储用户日志信息，目前采用了JAVA 和 Golang 两种途径。
#Linux内核优化（非常重要） 可以使用netstat -su 查看UDP是否有错包，如果查看到有UDP receive errors，可以调整UDP缓冲区的大小以应对大规模请求，主要参数如下
1net.core.rmem_max=26214400 2net.core.rmem_default=26214400 #客户端情况介绍 客户端采用PHP语言进行编写，由于PHP底层采用C实现，所以UDP客户端的性能应该算是最佳了，相关代码如下：
1&amp;lt;?php 2$islocalUdp = true; 3$server_ip = &amp;#39;127.0.0.1&amp;#39;; 4$server_port = 10000; 5$message = &amp;#39;loginfo&amp;#39;; 6 7if($islocalUdp){ 8 $socket = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP); 9 $ret = socket_sendto($socket, $message, strlen($message), 0, $server_ip, $server_port); 10}else{ 11 $message = &amp;#34;$server_ip**$server_port**$message&amp;#34;; 12 13 $ret = sendDataUds ($message,3,&amp;#39;/dev/shm/unix_udp_socks.sock&amp;#39;); 14} 15?&amp;gt; #JAVA服务端介绍 JAVA使用名声很大的Netty 网络包。
#Golang 服务端介绍 Golang服务端采用Net包中的ListenUDP进行程序编写，由于目前没有对大日志进行测试，所以不进行缓冲区中转编程，相关代码如下：
1package main 2 3import ( 4	&amp;#34;fmt&amp;#34; 5	&amp;#34;log&amp;#34; 6	&amp;#34;net&amp;#34; 7) 8 9const ( 10	BUF_SIZE = 1024 11) 12 13func main() { 14	udp_addr, err := net.</description></item><item><title>测试报告：HTTP Post 与 Unix Domain Socket 通信性能对比</title><link>https://icorer.com/icorer_blog/posts/test-report-comparison-of-communication-performance-between-http-post-and-unix-domain-socket/</link><pubDate>Mon, 28 May 2018 09:35:18 +0800</pubDate><guid>https://icorer.com/icorer_blog/posts/test-report-comparison-of-communication-performance-between-http-post-and-unix-domain-socket/</guid><description>&lt;h2 id="背景描述">背景描述&lt;a class="anchorjs-link" href="#%e8%83%8c%e6%99%af%e6%8f%8f%e8%bf%b0">&lt;/a>&lt;/h2>&lt;p>因工作需求，项目需要在不同的程序语言框架中进行通信，目前对于进程通信的方式，互联网上主要有HTTP请求、IPC通信、Socket通信、共享内存通信，虽然共享内存效率最高，但是对于内存结构的设计与队列维持需要很高的系统实现能力，所以目前我测试了HTTP与Unix Socket这两种通信方案。&lt;/p>
&lt;h2 id="测试环境搭建">测试环境搭建&lt;a class="anchorjs-link" href="#%e6%b5%8b%e8%af%95%e7%8e%af%e5%a2%83%e6%90%ad%e5%bb%ba">&lt;/a>&lt;/h2>&lt;p>目前分为HTTP和Unix Socket通信两种测试环境，为了保持测试环境尽量统一，我们请求端用PHP语言、接受信息端用Go语言。
测试软件使用 Jmeter 4.0
操作系统：Centos 7
硬件条件：I5 CPU、8GB内存&lt;/p></description></item></channel></rss>