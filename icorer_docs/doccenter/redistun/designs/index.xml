<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>系统设计 on 工匠之芯-文档中心</title><link>https://icorer.com/icorer_docs/doccenter/redistun/designs/</link><description>Recent content in 系统设计 on 工匠之芯-文档中心</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://icorer.com/icorer_docs/doccenter/redistun/designs/index.xml" rel="self" type="application/rss+xml"/><item><title>OverView</title><link>https://icorer.com/icorer_docs/doccenter/redistun/designs/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/redistun/designs/overview/</guid><description> OverView #</description></item><item><title>1.1基础运行框架</title><link>https://icorer.com/icorer_docs/doccenter/redistun/designs/1.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/redistun/designs/1.1/</guid><description>一. 基础运行框架 # 1.1 设计概述 # 基础运行框架也可以成为程序组织结构,一个项目必须要有足够清晰的工程文件结构. 在清晰的工程结构下,系统的各个模块才会有适合自己的存储位置,从存储位置可以上升为代码的调用路径,好的基础运行框架,既可以让系统的源码结构清楚很多,也可以降低模块间的耦合度,提高系统的稳定性.
1.2 工程框架组成部分 # 在此项目工程结构中,最外层的文件结构主要包括以下几部分, 项目工程一级文件结构如下图所示:
cmd目录 : 此目录是工程运行体的源码目录,也就是最终会编译出来的可执行体的源码目录,这个目录包括 proxy,daemon目录. config目录 : 配置文件存储目录. deploy目录 : 工程部署目录,里面会包含一些部署脚本和部署工具. doc目录 : 文档目录 ,里面包括一系列的子文件夹,用来保存每个子功能的描述文档. example目录 : 样例目录,对于一些对外提供的功能模块做一些功能示例. script目录 : 脚本目录,里面的脚本相对与deploy目录里的脚本更偏向于一些模块测试脚本. src目录 : 模块源代码目录, 这个目录是工程框架中最重要的一部分,主要包括工程的模块元素,其中包括models , proxy , redtun , utils目录,后面会做更加详细的阐述. vender目录 : 外部库目录,因为外部的包不断更新,这里的vender更偏向于把适合工程的外部依赖库进行镜像保存,主要是为了提高工程的稳定性. 二. 重要部分拆分设计 # 2.1 cmd目录 # 这个是运行体目录,主要存储main包结构的文件源码,目前里面包含两部分:
proxy目录 : redisTunel主程序体 daemon目录 : redisTunel的容灾器程序体 2.2 SRC目录结构 # SRC目录的结构如下图:
这个目录会包含一些子目录文件夹,主要存储功能包级别的源码文件及源码目录,主要包括:
models目录 : 数据结构目录,存储系统用到的数据结构相关定义 proxy目录 : 代理模块,这个模块专门储存redis代理相关的功能,既包括本地监听级别的backend,也包括协议解析部分的redis目录,还包括plugin插件目录.</description></item><item><title>1.2配置解析器</title><link>https://icorer.com/icorer_docs/doccenter/redistun/designs/1.2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/redistun/designs/1.2/</guid><description>1.2 配置解析器设计 # Agent配置器, 主要负责解析来自网络 或者 文件系统中的配置文件,目前提供配置文件解析模块,配置解析器设计主要包括以下部分:
配置信息元素结构. 配置解析器相关解析函数. 配置解析器对外API接口服务,允许动态更新配置. 组成结构图如下: 1.2.1 配置信息元素 # 随着系统功能的不断丰富,系统的配置项目也会越来越多,目前配置解析器主要解析的数据对象包括:
系统通用配置 : 对系统的通用配置进行解析 网络组配置 : 对通信组件中需要使用的redis集群组进行配置 1.2.2 配置样例 # local_unix_common_uri: /home/corerman/DATA/ICODE/GoLang/RedisTunel-go/bin/unix/ api_http_listen_uri: 127.0.0.1:10000 redis_group_list: - server_name: redis-pool1 group_id : 1 is_enable: true local_unix_name: redis1 master_server : 127.0.0.1:6379 master_conn_pool_size:10,20 master_conn_idle_time_out: 200 slave_server : 127.0.0.1:6380,127.0.0.1:6381,127.0.0.1:6382,127.0.0.1:6383 slave_conn_pool_size:30,40 slave_conn_idle_time_out: 200 - server_name: redis-pool2 group_id : 2 is_enable: true local_unix_name: redis2 master_server : 127.0.1.1:6379 master_conn_pool_size:10,20 master_conn_idle_time_out: 200 slave_server : 127.</description></item><item><title>1.3通信组件</title><link>https://icorer.com/icorer_docs/doccenter/redistun/designs/1.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/redistun/designs/1.3/</guid><description> 1.3 通信组件设计 # 通信组件目前不包括协议解析部分,这里的通信组件就是纯粹的网络通信层设计.
1.3.1 通信组件组成部分 # 目前网络通信层分为两部分:
本地UNIX监听组,用于高速的IPC通信 每个UNIX监听组所对应一组远端redis服务器,分别对于主从进行连接池连接. 1.3.1 通信组件链路结构 # Redis-Tunel很重要的是网络代理部分,在网络代理方面由三部分组成.
第一部分是对远程redis-server的连接池. 第二部分是对本地众多php-fpm客户端的UNIX请求连接管理. 第三部分是对这三端之间redis通信协议进行兼容.</description></item><item><title>1.4 协议解析器与拦截器</title><link>https://icorer.com/icorer_docs/doccenter/redistun/designs/1.4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/redistun/designs/1.4/</guid><description>1.4 协议解析器与拦截器 # 作为网络中间件,我们需要针对网络数据包进行读取之外,还需要对数据包进行解析工作,基于redis协议做了解析之后,我们还需要在解析器的基础上做拦截器,针对不同的redis做不同的处理流程.
1.4.1 协议解析器设计 # 协议解析器,是一个单独的模块,它主要针对网络数据包进行redis协议的解析工作,虽然redis协议具有统一的数据格式,但是还需要对每种协议命令做兼容操作.
1.4.2 协议解析器构成成分 # redis协议解析器 : 主要用来解析redis协议 (decoder) redis协议编码器 : 主要用来组装redis协议 (encoder) 1.4.3 解析器 和 拦截器 的工作流程 配合 # 这两个重要组件的功能流程配合如下:
[PHP-FPM请求] &amp;ndash;&amp;gt;** [RedisTunel中间件]** &amp;ndash;&amp;gt; (读取数据包) &amp;ndash;&amp;gt; (解析数据包协议) &amp;ndash;&amp;gt; (对指定命令进行拦截操作) &amp;mdash;&amp;gt; (转发下游redis服务) &amp;ndash;&amp;gt; [下游redis服务] &amp;ndash;&amp;gt; (处理命令并响应) &amp;ndash;&amp;gt; [RedisTunel中间件] &amp;mdash;&amp;gt; (响应请求) &amp;mdash;&amp;gt;** [PHP-FPM]**</description></item><item><title>1.5 NetHandle组件</title><link>https://icorer.com/icorer_docs/doccenter/redistun/designs/1.5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/redistun/designs/1.5/</guid><description>NetHandle # 这是一个库,方便构建高性能TCP服务端应用程序,站在Go语言的巨人肩膀上
项目地址: uriModule/NetHandle
一. 特点 # 高性能,低资源消耗 非常简单易用的开发接口 支持众多协议,TCP,UDP,UNIX 二. 安装 # go get -u moduleUri/NetHandle
三. 性能测试: # 3.1 50*10000 (50线程 X 10000请求) # 3.2 50*20000 (50线程 X 20000请求) # 3.3 100*10000 (100线程 X 10000请求) # 四. 样例代码: # 使用这个库的时候,只需要自定义简单的回调函数,即可构造出性能强悍的网络监听.
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;moduleUri/NetHandle&amp;#34; &amp;#34;log&amp;#34; &amp;#34;sync&amp;#34; ) var addrTcp = &amp;#34;127.0.0.1:10000&amp;#34; func main() { log.SetFlags(log.Lshortfile | log.LstdFlags) var mu sync.RWMutex count := 0 go log.</description></item><item><title>1.5 哈希分操器组件</title><link>https://icorer.com/icorer_docs/doccenter/redistun/designs/1.6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/redistun/designs/1.6/</guid><description>背景描述: # 哈希分槽器,顾名思义,它的主要工作就是根据redis协议中的key值进行哈希计算,并选择相关的存储节点,在不同的节点上完成redis数据的读写操作.
通过上面的描述,我们可以看出,哈希分槽器主要的设计部分包括如下:
数据分槽器 : 基于一致性哈希算法,负责key值的落槽工作,每个槽对应一个redis group 单元. 哈希结构及算法 : 需要减少节点添加删除造成的缓存失效问题,所以采用一致性哈希算法. 一. 数据分槽器(Slots) # 在RedTun设计下, 数据分槽器属于Neter的一部分,主要是面向网络组进行服务,数据分槽器前后沟通了一致性哈希算法,服务器group节点,redis客户端请求这三方,是用户的请求可以通过一致性哈希算法准确落到指定的redis group内,响应的group负责读写分离.
1.1 用户数据分槽流程 # 1.2 分槽器实现 # 为了兼容线上环境,分槽器目前的一致性哈希算法实现高度参考predis的hashring,采用crc32 IEEE作为hash的值计算算法,采用uint32作为hash环的大小.
1.3 算法兼容性测试 # 为了保障RedTun的一致性哈希算法 和 线上环境predis的一致性哈希算法一致,避免缓存大量失效的情况,目前我们针对这两个算法实现做了单元测试:
测试总量: **8529820次 ** 随机 key 的哈希生成与结果匹配.
测试异常: 0次
总共进行了800多万次测试,两个语言的算法实现没有出现差异结果,说明RedTun内部的一致性哈希算法已经和线上高度一致,不会造成失效问题.
1.4 一致性哈希的相关数据结构优化 # 1.4.1 哈希环的hash key选择 # 一致性哈希中,每个key的稳定性决定了哈希环上节点位置的稳定性,所以,在RedTun中,对于hash key的选择没有粗略的选择 IP:PORT , 而是在用户配置区间为每个GROUP提供了一个名字叫做&amp;quot;hash_ring_key&amp;quot; , 根据这个字段内的数据进行哈希环的构造.
二 . 哈希结构及算法 # 现在我们需要设计一个哈希结构,这个哈希结构能够把各个redis group节点映射上来,并且这个哈希结构具有较高的稳定性,当添加或者删除相关的group节点时,不会造成哈希映射的大规模失效.在上述的需求下,我们选择了一致性哈希这个算法.
2.1 一致性哈希相关解释 # 关于一致性哈希的描述,各处都有比较完善的文章,下面主要摘抄部分来阐述一致性哈希的关键点.
其实，⼀致性哈希算法也是使⽤取模的⽅法，只是，刚才描述的取模法是对服务器的数量进⾏取模，⽽⼀致性哈希算法是对2^32取模.⾸先，我们把⼆的三⼗⼆次⽅想象成⼀个圆，就像钟表⼀样，钟表的圆可以理解成由60个点组成的圆，⽽此处我们把这个圆想象成由2^32个点组成的圆，⽰意图如下:
圆环的正上⽅的点代表0，0点右侧的第⼀个点代表1，以此类推，2、3、4、5、6……直到2^32-1,也就是说0点左侧的第⼀个点代表2^32-1,我们把这个由2的32次⽅个点组成的圆环称为hash环,假设我们有3台缓存服务器，服务器A、服务器B、服务器C，那么这三台服务器肯定有⾃⼰的IP地址，我们使⽤它们各⾃的IP地址进⾏哈希计算，使⽤哈希后的结果对2^32取模，可以使⽤如下公式⽰意。 hash（服务器A的IP地址） % 2^32</description></item></channel></rss>