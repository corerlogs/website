<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>中间件部署 on 工匠之芯-文档中心</title><link>https://icorer.com/icorer_docs/doccenter/redishub/deploy/</link><description>Recent content in 中间件部署 on 工匠之芯-文档中心</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://icorer.com/icorer_docs/doccenter/redishub/deploy/index.xml" rel="self" type="application/rss+xml"/><item><title>3.1 部署文档</title><link>https://icorer.com/icorer_docs/doccenter/redishub/deploy/3.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/redishub/deploy/3.1/</guid><description>一. 系统设计 # 1.1 背景描述 # 由于商城-商品中心系统目前使用的Redis单实例模式下，出现了机器存储过高、单机无法应对黑五大流量吞吐，因此进行单实例向集群化的改造，但是由于存在以下两种原因，造成需要自研中间件：
Redis标准集群不支持跨数据槽的MGET、MSET指令。 PHP生态缺乏并发支持，造成在M指令上性能很差。 最终我们设计RedisHub集群中间件，一方面用它来支持跨数据槽的MSET、MGET指令，一方面借助它的并发优势为PHP底层的M指令指令提高性能。
1.2 总体设计 # 中间件的总体结构设计图如下所示:
1.3 设计阐述 # 如图所示，PHP通过Unix Domain Socket途径和中间件进行IPC通信，然后中间件把PHP的redis请求进行处理，并转发到下游的Redis集群中，为PHP业务系统提供无缝的单实例到集群的改造，相关的网络模型如下：
二. 组件部署文档 # RedisHub中间件 部署主要分为两个部分, 安装相关安装包 和 修改配置并运行.
2.1 部署准备 # Linux 64bit 操作系统 RedisHub 二进制文件 调整Redishub配置文件：rh_config.yaml RedisHub进程监控工具 ,例如Supervisor 2.2 应用体安装 # 2.2.1 程序体获取 # 最新版本的中间件程序可以联系公共平台架构部门-开发二组获取，我们编译了Linux-64bit可执行程序，给予X运行权限，即可运行。
2.2.2 程序体运行 # 由于中间件是个可以方便运行的二进制体，但是我们在运行的时候需要制定配置文件路径，例如以下命令：
./RedisHub -c /home/corerman/DATA/ICODE/GoLang/RedisHub/config/rh_config.yaml
具体运行参数，运维伙伴可以自行调整。
三. 配置文件详解 # 配置文件（rh_config.yaml）是这个系统运行的基础，所以这里将讲解配置文件的相关信息.
#RedisHub YAML config file #RedisHub Net Config net: listen_uri: unix:/tmp/redis.sock #Unix Domain Socket的监听路径：PHP推荐使用这种模式 #listen_uri: tcp:10.</description></item></channel></rss>