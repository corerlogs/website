<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>系统模块测试 on 工匠之芯-文档中心</title><link>https://icorer.com/icorer_docs/doccenter/redishub/module_test/</link><description>Recent content in 系统模块测试 on 工匠之芯-文档中心</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://icorer.com/icorer_docs/doccenter/redishub/module_test/index.xml" rel="self" type="application/rss+xml"/><item><title>2.1 NetHandle组件测试</title><link>https://icorer.com/icorer_docs/doccenter/redishub/module_test/2.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/redishub/module_test/2.1/</guid><description> NetHandle # This is a library for building high-performance TCP server applications, standing on the shoulders of Go giants and redcon
1. Features # High performance, low resource consumption Very easy to use development interface 2. Install # go get -u uriModule/NetHandle
3. Performance Testing: # 3.1 50*10000 (50 threads X 10000 requests) # 3.2 50*20000 (50 threads X 20000 requests) # 3.3 100*10000 (100 threads X 10000 requests) #</description></item><item><title>2.2 中间件完整测试</title><link>https://icorer.com/icorer_docs/doccenter/redishub/module_test/2.2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/redishub/module_test/2.2/</guid><description>零、亿级数据压测 # // 测试脚本 &amp;lt;?php $redis = new Redis(); try { //connect 是 异常级别 $redis-&amp;gt;connect(&amp;#39;/tmp/redis.socks&amp;#39;); $ret = $redis-&amp;gt;set(&amp;#34;hello&amp;#34;, &amp;#34;helloworld&amp;#34;,2); var_dump($ret); $ret = $redis-&amp;gt;get(&amp;#34;hello&amp;#34;); var_dump($ret); $ret = $redis-&amp;gt;del(&amp;#34;hello&amp;#34;); var_dump($ret); $ret = $redis-&amp;gt;mset([&amp;#34;test1&amp;#34; =&amp;gt; &amp;#39;value1&amp;#39;, &amp;#34;test2&amp;#34; =&amp;gt; &amp;#39;value2&amp;#39;]); var_dump($ret); $ret = $redis-&amp;gt;del(&amp;#34;test1&amp;#34;, &amp;#34;test2&amp;#34;, &amp;#34;test3&amp;#34;); var_dump($ret); $ret = $redis-&amp;gt;mget([&amp;#34;test1&amp;#34;, &amp;#34;test2&amp;#34;, &amp;#34;test3&amp;#34;, &amp;#34;test4&amp;#34;, &amp;#34;test5&amp;#34;, &amp;#34;test6&amp;#34;, &amp;#34;test7&amp;#34;, &amp;#34;test8&amp;#34;, &amp;#34;test9&amp;#34;, &amp;#34;test10&amp;#34;, &amp;#34;test11&amp;#34;, &amp;#34;test12&amp;#34;, &amp;#34;test13&amp;#34;, &amp;#34;test14&amp;#34;, &amp;#34;test15&amp;#34;, &amp;#34;test16&amp;#34;, &amp;#34;test17&amp;#34;, &amp;#34;test18&amp;#34;, &amp;#34;test19&amp;#34;, &amp;#34;test20&amp;#34;]); var_dump($ret); $ret = $redis-&amp;gt;rPush(&amp;#34;push&amp;#34;,&amp;#34;key1&amp;#34;,2019,&amp;#34;key2&amp;#34;); var_dump($ret); $val1 = $redis-&amp;gt;lPop(&amp;#34;push&amp;#34;); var_dump($val1); $val1 = $redis-&amp;gt;lPop(&amp;#34;push&amp;#34;); var_dump($val1); $val1 = $redis-&amp;gt;lPop(&amp;#34;push&amp;#34;); var_dump($val1); } catch (\Exception $ex) { var_dump($ex-&amp;gt;getMessage()); } # 终端输出 ______ _ _ _ _ _ (_____ \ | (_) (_) (_) | | _____) )_____ __| |_ ___ _______ _ _| |__ | __ /| ___ |/ _ | |/___) ___ | | | | _ \ | | \ \| ____( (_| | |___ | | | | |_| | |_) ) |_| |_|_____)\____|_(___/|_| |_|____/|____/ 2019/09/15 09:40:27 main.</description></item></channel></rss>