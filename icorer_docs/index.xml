<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>工匠之芯-文档中心</title><link>https://icorer.com/icorer_docs/</link><description>Recent content on 工匠之芯-文档中心</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><atom:link href="https://icorer.com/icorer_docs/index.xml" rel="self" type="application/rss+xml"/><item><title>2.1 NetHandle组件测试</title><link>https://icorer.com/icorer_docs/doccenter/redishub/module_test/2.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/redishub/module_test/2.1/</guid><description> NetHandle # This is a library for building high-performance TCP server applications, standing on the shoulders of Go giants and redcon
1. Features # High performance, low resource consumption Very easy to use development interface 2. Install # go get -u uriModule/NetHandle
3. Performance Testing: # 3.1 50*10000 (50 threads X 10000 requests) # 3.2 50*20000 (50 threads X 20000 requests) # 3.3 100*10000 (100 threads X 10000 requests) #</description></item><item><title>2.1 扩展总览</title><link>https://icorer.com/icorer_docs/doccenter/pulseflow/pulgin_designed/2.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/pulseflow/pulgin_designed/2.1/</guid><description>一. 组件概述 # PulseFLow插件端主要完成下面两个方面的功能。 # 1.1 拦截PHP执行过程 （保障高效） # PulseFlow的第一个部分是PHP扩展，这个PHP扩展的主要功能是拦截PHP脚本在执行过程中的运行信息。目前拦截的信息包括：
函数名及类名
函数执行耗时
函数执行的内存损耗
函数执行的次数统计
上述的四个指标均指在一个PHP生命周期内。
在拦截执行信息的过程中，为了保障高效率，我们先后调整了两次数据结构，最终在简易的数据结构基础上，借助全局变量的威力，去除了序列化和反序列化过程，大大提高了信息采集的效率。
1.2 发送拦截的性能信息（保障高效稳定） # 在 1.1 节中，我们介绍了扩展拦截了一系列的运行信息，但是还需要发送出去这个环节，如何既快速又稳定地和信息接收端通信，我们测试了以下方案。
System V Message Queue
Posix Message Queue
Unix Domain Socket
Zero MQ
NanoMsg
Shared Memory
我们在详尽测试了上述六种方案后，为了保证稳定性、系统搭建的简易性，我们选择了既安全又快速的System V Message Queue。
这是一种 Linux 内核消息队列，速度仅次于共享内存通信，虽然没有共享内存速度快，但是具有很好的安全性 和 队列性，毕竟是线上产品，所以我们在1.0版本中采用此方案。（但是我们保留了共享内存代码分支，后期共享内存版本稳定后再另行推出。）</description></item><item><title>3.1 后台总览</title><link>https://icorer.com/icorer_docs/doccenter/pulseflow/plugin_backend/3.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/pulseflow/plugin_backend/3.1/</guid><description>PulseFLow还有一部分功能是集中在信息后端的，当PHP引擎发送信息给后端程序后，后端程序再把信息进行组装，发给下一级程序。
一 . 组成部分 # 后端程序，分为以下几个部分：
配置中心：（配置文件 + 配置解析器）（采用ini文件配置格式）。
进程管理器：维持进程池，保持进程池的存活量。
信息发送： 信息组装 + 信息发送（UDP发送）
二. 工作流程 # 2.1 总体流程图 # 2.2 系统模型（进程池模型） # 后端组件采用进程池模型，主程序启动时，首先读取配置文件中关于进程池大小的配置选项，然后启动相关数量的子工作进程。
随后主进程进入稳定性极高的进程池监控流程，如果拦截到子进程有挂掉的情况发生，读取挂掉的状态并在相应的进程池位置开辟新的工作子进程。
通过进程池可以大大提高进程读取内核消息队列的效率，通过进程池管理程序可以大大提高整体后端程序的稳定性。
2.3 功能分配 # 1. 主进程负责【管理进程池】，负责【创建可用的内核消息队列】。 # 2. 工作子进程负责 【监控内核消息队列】&amp;mdash;&amp;gt;【读取消息】&amp;mdash;&amp;gt;【组装信息】&amp;mdash;&amp;gt;【UDP发送下游】 #</description></item><item><title>3.1 部署文档</title><link>https://icorer.com/icorer_docs/doccenter/redishub/deploy/3.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/redishub/deploy/3.1/</guid><description>一. 系统设计 # 1.1 背景描述 # Redis单实例模式下，出现了机器存储过高,因此进行单实例向集群化的改造，但是由于存在以下两种原因，造成需要自研中间件：
Redis标准集群不支持跨数据槽的MGET、MSET指令。 PHP生态缺乏并发支持，造成在M指令上性能很差。 最终我们设计RedisHub集群中间件，一方面用它来支持跨数据槽的MSET、MGET指令，一方面借助它的并发优势为PHP底层的M指令指令提高性能。
1.2 总体设计 # 中间件的总体结构设计图如下所示:
1.3 设计阐述 # 如图所示，PHP通过Unix Domain Socket途径和中间件进行IPC通信，然后中间件把PHP的redis请求进行处理，并转发到下游的Redis集群中，为PHP业务系统提供无缝的单实例到集群的改造，相关的网络模型如下：
二. 组件部署文档 # RedisHub中间件 部署主要分为两个部分, 安装相关安装包 和 修改配置并运行.
2.1 部署准备 # Linux 64bit 操作系统 RedisHub 二进制文件 调整Redishub配置文件：rh_config.yaml RedisHub进程监控工具 ,例如Supervisor 2.2 应用体安装 # 2.2.1 程序体运行 # 由于中间件是个可以方便运行的二进制体，但是我们在运行的时候需要制定配置文件路径，例如以下命令：
./RedisHub -c /home/corerman/DATA/ICODE/GoLang/RedisHub/config/rh_config.yaml
具体运行参数，运维伙伴可以自行调整。
三. 配置文件详解 # 配置文件（rh_config.yaml）是这个系统运行的基础，所以这里将讲解配置文件的相关信息.
#RedisHub YAML config file #RedisHub Net Config net: listen_uri: unix:/tmp/redis.sock #Unix Domain Socket的监听路径：PHP推荐使用这种模式 #listen_uri: tcp:10.100.183.180:16379 #TCP的监控IP及端口 #RedisHub cluster Config cluster: start_nodes: 10.</description></item><item><title>4.1 phpredis对接redishub</title><link>https://icorer.com/icorer_docs/doccenter/redishub/system_access/4.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/redishub/system_access/4.1/</guid><description>phpredis 对接 RedisHub 改造方案 # 一、背景描述 # phpredis进行Redis集群化改造，对接 RedisHub 中间件，并调整phpredis底层，增加业务降级逻辑。
二、改造方案 # 2.1、Agent 连接 # 由于 RedisHub 采用 UNIX domain连接，本地部署 Agent 的方式，不存在 port端口，故 redis连接时，无法再传递该参数，需要去掉，具体连接代码如下
public function __construct($config, $prefix = &amp;#39;prefix:&amp;#39;) { $this-&amp;gt;prefixH = $prefix; $this-&amp;gt;redisconf = $config; $this-&amp;gt;redis = new \Redis(); try { $this-&amp;gt;redis-&amp;gt;connect($this-&amp;gt;redisconf[&amp;#39;host&amp;#39;]); } catch (\Exception $exception) { Logger::getInstance()-&amp;gt;error(&amp;#39;Redis agent connect error, &amp;#39; . $exception-&amp;gt;getMessage() . &amp;#39;, &amp;#39; . $this-&amp;gt;redisconf[&amp;#39;host&amp;#39;]); try { //redis集群中间件服务不可用，降级 $this-&amp;gt;redis = new \RedisCluster(null, $this-&amp;gt;redisconf[&amp;#39;cluster&amp;#39;][&amp;#39;node&amp;#39;], $this-&amp;gt;redisconf[&amp;#39;cluster&amp;#39;][&amp;#39;timeout&amp;#39;], $this-&amp;gt;redisconf[&amp;#39;cluster&amp;#39;][&amp;#39;readTimeout&amp;#39;], $this-&amp;gt;redisconf[&amp;#39;cluster&amp;#39;][&amp;#39;persistent&amp;#39;]); } catch (\Exception $exception) { Logger::getInstance()-&amp;gt;error(&amp;#39;RedisCluster connect error, &amp;#39; .</description></item><item><title>4.1 运行跟踪报告</title><link>https://icorer.com/icorer_docs/doccenter/pulseflow/run_status/4.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/pulseflow/run_status/4.1/</guid><description> 一. PulseFlow_IPC_Backend 后台进程池稳定性 # 1.1后台进程池截图： # 进程状态正常，没有僵尸或异常进程存在，观察 进程 PID可发现，所有进程均为最初创建的进程池内的进程，代表每个进程一直在正常运行，没有出现过异常退出。 # 二. 内核消息队列状态 # ipcs 通过观察，可以发现内核消息队列 无任何 数据积压，所有的数据均转发下游服务，内核队列数量安全，内核队列吞吐满足当前线上环境。 # 三. UDP 系统状态 # 3.1 UDP系统连接情况： # netstat -au
通过观察，UDP连接数稳定，系统内部没有PulseFlow所残留的连接 ，没有对系统 UDP 环境进行任何损坏。 # 3.2 UDP 数据包缓冲区情况 # netstat -anus 由于线上这台机器的系统是 基于 centos6 ，内核版本较低，没有看到我关注的udp s ， 从上图没有看到异常情况end buffer errors情况 ， 从上图没有看到异常情况 # 四. php-fpm 运行状态 # 从上图可以观察出扩展上线后，报告整理期间总共处理过将近500万个请求，没有造成过量慢请求，php-fpm进程池稳定运行，扩展没有对php-fpm进程造成不良影响。 #</description></item><item><title>OverView</title><link>https://icorer.com/icorer_docs/doccenter/ak-2019/designs/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/ak-2019/designs/overview/</guid><description> OverView #</description></item><item><title>OverView</title><link>https://icorer.com/icorer_docs/doccenter/logdarts/designs/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/logdarts/designs/overview/</guid><description> OverView #</description></item><item><title>OverView</title><link>https://icorer.com/icorer_docs/doccenter/pulseflow/overviews/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/pulseflow/overviews/overview/</guid><description> OverView #</description></item><item><title>OverView</title><link>https://icorer.com/icorer_docs/doccenter/redishub/designs/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/redishub/designs/overview/</guid><description> OverView #</description></item><item><title>OverView</title><link>https://icorer.com/icorer_docs/doccenter/redistun/designs/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/redistun/designs/overview/</guid><description> OverView #</description></item><item><title>1.1 安装文档</title><link>https://icorer.com/icorer_docs/doccenter/pulseflow/overviews/1.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/pulseflow/overviews/1.1/</guid><description>PulseFlow 组件安装文档 # 一. 系统介绍 # 随着公司PHP项目体的不断增大，随着不同工程师的功能迭代，如何有效获取PHP项目的执行性能，对于系统整体模块显得异常重要，PulseFlow是一个公司团队内部自研地性能跟踪扩展，它可以在程序员无感知的情况下有效跟踪每一个函数的执行效率，主要分析CPU时间消耗、内存大小消耗，执行次数这三个指标，下面我们将从 PHP生命期 到 组件设计 到 性能优化这三个方面来进行阐述组件。
二 . PulseFLow 扩展端架构 # 2.1 功能架构 # 2.2 流程架构 # 三 . PulseFLow 后端程序架构 # 3.1 后端程序流程 # 后台数据转发程序，它负责从信息通道里读取PHP扩展写入的信息，并转发给相应的下一级程序，相关流程图如下。
3.2 后端总体架构 # 四. 系统安装手册 # （请一定按照顺序操作）
下面是详细的安装文档，目的是让阅读者能够顺利编译安装PulseFLow扩展。
4.1. 环境准备 # Centos 7系统
PHP 7.0 版本以上
4.2. 内核参数调整（编辑 /etc/sysctl.conf 文件） # 扩展依赖UDP数据包发送 和 Linux 内核消息队列，所以需要调整以下两方面参数。
特殊说明：配置完毕后 采用 sudo sysctl -p生效
4.2.1 调整UDP发送缓冲区大小 # 为了减少UDP发送丢包，因此调大UDP数据包发送缓冲区，经过实验，分配256MB就可以足够。配置选项如下
net.core.wmem_max = 268435456</description></item><item><title>1.1 数据结构分析</title><link>https://icorer.com/icorer_docs/doccenter/logdarts/designs/1.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/logdarts/designs/1.1/</guid><description>二. 数据结构分析 # 2.1 数据结构构造（已审查） # 组件数据结构采用数组进行存储，数组的数据结构如下图：
数组结构的各部分阐述如下：
TOTAL_COUNT：记录的总数量
TOTAL_SIZE ： 数据包的总大小，通过这个参数可以控制每次UDP数据包的大小临界值。
每一个数据元包括：log_str、log_struct、log_length这三部分。
log_str：这个元素是一个数组，每个元素就是一个完整的日志字符串。
log_struct：这个元素是一个数组，每个数组元素是个三元组，是构造log_str的源数据。
log_length：这个元素是一个数组，每个元素都是一个数值型数据，代表当前id对应的字符串的长度。
2.2 数据结构操作：(添加、删除）(已审查) # 2.2.1 添加操作 （已审查） # 当调用set和count函数添加数据时，组件会同时添加log_str、log_struct、log_length三个元素，由于这三个元素添加时数组ID均相同，所以三个元素在结构上是可以通过id进行统一索引的，类似的模型代码如下。
$log_size = strlen($log); self::$gauae_metrics_logs[&amp;#39;LOGS_DATA&amp;#39;][&amp;#39;log_str&amp;#39;][] = $log; self::$gauae_metrics_logs[&amp;#39;LOGS_DATA&amp;#39;][&amp;#39;log_struct&amp;#39;][] = $logPacker; self::$gauae_metrics_logs[&amp;#39;LOGS_DATA&amp;#39;][&amp;#39;log_length&amp;#39;][] = $log_size; self::$gauae_metrics_logs[&amp;#39;TOTAL_COUNT&amp;#39;]++; self::$gauae_metrics_logs[&amp;#39;TOTAL_SIZE&amp;#39;] += $log_size; TOTAL_COUNT在添加的时候会进行递增，TOTAL_SIZE会在添加的时候自动把当前的数据包长度进行添加。
2.2.1 删除操作 （已审查） # 当调用send_count_metrics_log、send_gauae_metrics_log函数发送发送数据是，组件会同时删除log_str、log_struct、log_length三个元素，并同时调整TOTAL_COUNT、TOTAL_SIZE数值。
foreach (self::$gauae_metrics_logs[&amp;#39;LOGS_DATA&amp;#39;][&amp;#39;log_str&amp;#39;] as $key =&amp;gt; $val) { $udpPakData .= $val; //发送前组装最终字符串 $log_size = self::$gauae_metrics_logs[&amp;#39;LOGS_DATA&amp;#39;][&amp;#39;log_length&amp;#39;][$key]; //获取当前位置的长度 unset(self::$gauae_metrics_logs[&amp;#39;LOGS_DATA&amp;#39;][&amp;#39;log_str&amp;#39;][$key]); unset(self::$gauae_metrics_logs[&amp;#39;LOGS_DATA&amp;#39;][&amp;#39;log_length&amp;#39;][$key]); unset(self::$gauae_metrics_logs[&amp;#39;LOGS_DATA&amp;#39;][&amp;#39;log_struct&amp;#39;][$key]); self::$gauae_metrics_logs[&amp;#39;TOTAL_COUNT&amp;#39;]--; self::$gauae_metrics_logs[&amp;#39;TOTAL_SIZE&amp;#39;] -= $log_size; } self::sendUdpPackage(self::$IP, self::$PORT, $udpPakData); //发送UDP TOTAL_COUNT在删除的时候会进行递减，TOTAL_SIZE会在删除的时候自动把当前的数据包长度进行缩减。</description></item><item><title>1.1基础运行框架</title><link>https://icorer.com/icorer_docs/doccenter/redishub/designs/1.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/redishub/designs/1.1/</guid><description> 一. 基础运行框架 # 1.1 设计概述 # 基础运行框架也可以成为程序组织结构,一个项目必须要有足够清晰的工程文件结构. 在清晰的工程结构下,系统的各个模块才会有适合自己的存储位置,从存储位置可以上升为代码的调用路径,好的基础运行框架,既可以让系统的源码结构清楚很多,也可以降低模块间的耦合度,提高系统的稳定性.
1.2 工程框架组成部分 # 在此项目工程结构中,最外层的文件结构主要包括以下几部分, 项目工程一级文件结构如下图所示:
cmd目录 : 此目录是工程运行体的源码目录,也就是最终会编译出来的可执行体的源码目录,这个目录包括 proxy,daemon目录. config目录 : 配置文件存储目录. deploy目录 : 工程部署目录,里面会包含一些部署脚本和部署工具. doc目录 : 文档目录 ,里面包括一系列的子文件夹,用来保存每个子功能的描述文档. example目录 : 样例目录,对于一些对外提供的功能模块做一些功能示例. script目录 : 脚本目录,里面的脚本相对与deploy目录里的脚本更偏向于一些模块测试脚本. src目录 : 模块源代码目录, 这个目录是工程框架中最重要的一部分,主要包括工程的模块元素,其中包括models 、pkg、 proxy 、redishub、 redis、util目录,后面会做更加详细的阐述. vender目录 : 外部库目录,因为外部的包不断更新,这里的vender更偏向于把适合工程的外部依赖库进行镜像保存,主要是为了提高工程的稳定性. 二. 重要部分拆分设计 # 2.1 cmd目录 # 这个是运行体目录,主要存储main包结构的文件源码,目前里面包含两部分:
RedisHub目录 : RedisHub主程序体 2.2 SRC目录结构 # SRC目录的结构如下图:
这个目录会包含一些子目录文件夹,主要存储功能包级别的源码文件及源码目录,主要包括:
models目录 : 数据结构目录,存储系统用到的数据结构相关定义 proxy目录 : 代理模块,这个模块专门储存redis代理相关的功能,既包括本地监听级别的backend,也包括协议解析部分的redis目录,还包括plugin插件目录. redhub目录: 这个目录是核心目录,主要的工作任务在于承上启下,因为在src目录下基础单元都是一个个独立的包,但是如何被cmd层的代码顺利调用,还需要redtun在src功能包基础上抽象cmd层调用的操作单元. utils目录 : 框架的套件目录,主要用来存储框架所使用的一系列套件包,例如errors , log , math , redis-client , trace , unsafe , rpc , sync , resolver , usage 等 pkg目录：包含codis redis协议解析器 redis目录：包含redis集群核心功能代码。</description></item><item><title>1.1基础运行框架</title><link>https://icorer.com/icorer_docs/doccenter/redistun/designs/1.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/redistun/designs/1.1/</guid><description>一. 基础运行框架 # 1.1 设计概述 # 基础运行框架也可以成为程序组织结构,一个项目必须要有足够清晰的工程文件结构. 在清晰的工程结构下,系统的各个模块才会有适合自己的存储位置,从存储位置可以上升为代码的调用路径,好的基础运行框架,既可以让系统的源码结构清楚很多,也可以降低模块间的耦合度,提高系统的稳定性.
1.2 工程框架组成部分 # 在此项目工程结构中,最外层的文件结构主要包括以下几部分, 项目工程一级文件结构如下图所示:
cmd目录 : 此目录是工程运行体的源码目录,也就是最终会编译出来的可执行体的源码目录,这个目录包括 proxy,daemon目录. config目录 : 配置文件存储目录. deploy目录 : 工程部署目录,里面会包含一些部署脚本和部署工具. doc目录 : 文档目录 ,里面包括一系列的子文件夹,用来保存每个子功能的描述文档. example目录 : 样例目录,对于一些对外提供的功能模块做一些功能示例. script目录 : 脚本目录,里面的脚本相对与deploy目录里的脚本更偏向于一些模块测试脚本. src目录 : 模块源代码目录, 这个目录是工程框架中最重要的一部分,主要包括工程的模块元素,其中包括models , proxy , redtun , utils目录,后面会做更加详细的阐述. vender目录 : 外部库目录,因为外部的包不断更新,这里的vender更偏向于把适合工程的外部依赖库进行镜像保存,主要是为了提高工程的稳定性. 二. 重要部分拆分设计 # 2.1 cmd目录 # 这个是运行体目录,主要存储main包结构的文件源码,目前里面包含两部分:
proxy目录 : redisTunel主程序体 daemon目录 : redisTunel的容灾器程序体 2.2 SRC目录结构 # SRC目录的结构如下图:
这个目录会包含一些子目录文件夹,主要存储功能包级别的源码文件及源码目录,主要包括:
models目录 : 数据结构目录,存储系统用到的数据结构相关定义 proxy目录 : 代理模块,这个模块专门储存redis代理相关的功能,既包括本地监听级别的backend,也包括协议解析部分的redis目录,还包括plugin插件目录.</description></item><item><title>2.2 中间件完整测试</title><link>https://icorer.com/icorer_docs/doccenter/redishub/module_test/2.2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/redishub/module_test/2.2/</guid><description>零、亿级数据压测 # // 测试脚本 &amp;lt;?php $redis = new Redis(); try { //connect 是 异常级别 $redis-&amp;gt;connect(&amp;#39;/tmp/redis.socks&amp;#39;); $ret = $redis-&amp;gt;set(&amp;#34;hello&amp;#34;, &amp;#34;helloworld&amp;#34;,2); var_dump($ret); $ret = $redis-&amp;gt;get(&amp;#34;hello&amp;#34;); var_dump($ret); $ret = $redis-&amp;gt;del(&amp;#34;hello&amp;#34;); var_dump($ret); $ret = $redis-&amp;gt;mset([&amp;#34;test1&amp;#34; =&amp;gt; &amp;#39;value1&amp;#39;, &amp;#34;test2&amp;#34; =&amp;gt; &amp;#39;value2&amp;#39;]); var_dump($ret); $ret = $redis-&amp;gt;del(&amp;#34;test1&amp;#34;, &amp;#34;test2&amp;#34;, &amp;#34;test3&amp;#34;); var_dump($ret); $ret = $redis-&amp;gt;mget([&amp;#34;test1&amp;#34;, &amp;#34;test2&amp;#34;, &amp;#34;test3&amp;#34;, &amp;#34;test4&amp;#34;, &amp;#34;test5&amp;#34;, &amp;#34;test6&amp;#34;, &amp;#34;test7&amp;#34;, &amp;#34;test8&amp;#34;, &amp;#34;test9&amp;#34;, &amp;#34;test10&amp;#34;, &amp;#34;test11&amp;#34;, &amp;#34;test12&amp;#34;, &amp;#34;test13&amp;#34;, &amp;#34;test14&amp;#34;, &amp;#34;test15&amp;#34;, &amp;#34;test16&amp;#34;, &amp;#34;test17&amp;#34;, &amp;#34;test18&amp;#34;, &amp;#34;test19&amp;#34;, &amp;#34;test20&amp;#34;]); var_dump($ret); $ret = $redis-&amp;gt;rPush(&amp;#34;push&amp;#34;,&amp;#34;key1&amp;#34;,2019,&amp;#34;key2&amp;#34;); var_dump($ret); $val1 = $redis-&amp;gt;lPop(&amp;#34;push&amp;#34;); var_dump($val1); $val1 = $redis-&amp;gt;lPop(&amp;#34;push&amp;#34;); var_dump($val1); $val1 = $redis-&amp;gt;lPop(&amp;#34;push&amp;#34;); var_dump($val1); } catch (\Exception $ex) { var_dump($ex-&amp;gt;getMessage()); } # 终端输出 ______ _ _ _ _ _ (_____ \ | (_) (_) (_) | | _____) )_____ __| |_ ___ _______ _ _| |__ | __ /| ___ |/ _ | |/___) ___ | | | | _ \ | | \ \| ____( (_| | |___ | | | | |_| | |_) ) |_| |_|_____)\____|_(___/|_| |_|____/|____/ 2019/09/15 09:40:27 main.</description></item><item><title>2.2 数据结构</title><link>https://icorer.com/icorer_docs/doccenter/pulseflow/pulgin_designed/2.2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/pulseflow/pulgin_designed/2.2/</guid><description>二. 数据结构 # 思来想去，要把这个扩展目前的功能阐述完全，首先我们来描述一下相关数据结构。
数据结构是扩展运行的基石，如何构造简单的数据结构，既能完整记录相关数据，又能够减少数据查询次数和提高数据进程间传输的便利性。
2.1 数据结构要求 # 在设计扩展的数据结构时，我们需要保障以下几点。
数据结构足够简单，便于代码阅读。
数据结构具有较高效能，最多容忍O(n)复杂度。
数据结构要便于传输，由于牵扯到IPC通信，所以这个部分特别重要。
在这基础上，我们设计了三类数据结构，包括：进程全局变量、SVIPC_Func_Struct 和 Function_Prof_Struct 。
2.2 进程全局变量 # 由于目前我们的进程模型是PHP-FPM，每一个PHP-FPM进程拥有一份独立的全局变量区域，全局变量主要围绕以下几个方面来设计。
INI配置文件加载变量
全局数据结构数据
数据1主要在PHP的 MI生命期阶段进行加载INI配置文件选项，数据2主要是为了完成插件功能而开辟的全局变量。
2.2.1 扩展配置参数 # 变量名 INI文件配置对应名称 默认值 含义 enabled PulseFlow.enabled false 是否启用插件？ disable_trace_functions PulseFlow.disable_trace_functions 空字符串 禁止跟踪的函数名列表（逗号分割） disable_trace_class PulseFlow.disable_trace_class 空字符串 禁止跟踪的类名列表（逗号分割） svipc_name PulseFlow.svipc_name /PulseFlow_sv_ipc System V IPC 所需要的文件路径名 svipc_gj_id PulseFlow.svipc_pj_id 1000 System V IPC 所需要的项目ID max_package_size PulseFlow.max_package_size 0 组件内部允许的最大消息队列发包大小，超过这个大小进行分包发送 log_dir PulseFlow.log_dir 空字符串 Plugin Log Dir ( 如果此参数不为空，则开启插件日志记录，目前只会记录必要日志信息 ) sampling_rate PulseFlow.</description></item><item><title>2.4 日志功能</title><link>https://icorer.com/icorer_docs/doccenter/pulseflow/pulgin_designed/2.4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/pulseflow/pulgin_designed/2.4/</guid><description/></item><item><title>框架层次设计</title><link>https://icorer.com/icorer_docs/doccenter/ak-2019/designs/1.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/ak-2019/designs/1.1/</guid><description> 一. 框架内部分层关系 # 基于目前的AK-2019框架代码: https://git.icorer.com/APLID/AK-2019
系统框架在设计上分为4层,相关层次结构从下向上如下图:
二. 框架各个层次的作用 # TP5.1 层: 引入进来的TP框架,采用其中的ORM和路由部分 AK-Frame层: 这一层是我们重力设计的一部分,这部分主要用来存储内核代码,和业务层完全分开,通过类或者包对外提供服务. APPS层: 这一层是业务代码层,里面每一个文件夹代表一组业务,由于这部分和AK-FRAME已经隔离,所以这里可以存储一组业务,也可以存储多组业务. APPS-FRAME: 这一层介于APPS层和AK-FRAME层,继承自AK-FRAME层,服务于APPS层,这一层主要是预防业务层代码需要定制化AK-FRAME内核.</description></item><item><title>1.2 AK-FRAME设计-Request Handle设计</title><link>https://icorer.com/icorer_docs/doccenter/ak-2019/designs/1.2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/ak-2019/designs/1.2/</guid><description/></item><item><title>1.2 代码流程分析</title><link>https://icorer.com/icorer_docs/doccenter/logdarts/designs/1.2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/logdarts/designs/1.2/</guid><description>三. 代码流程分析 # 组件模块从代码执行流程上来看，主要包括：
对象实例化
数据包组装
保存数据结构
发送数据包
3.1 对象实例化（已审查） # 组件采用单对象实例设计，主要的判断逻辑如下：
相关模型代码如下：
public static function getLoger() { if (!isset(self::$Loger)) { self::$Loger = new self(); } return self::$Loger; } 3.2 数据包组装（构造 $logPacker）（已审查） # 这里的数据包组装并不是直接组装成最终的字符串，而是组装为数据结构体，结构包括metrics_name、typeInfo、指标量这三部分，相关模型代码如下：
public static function encode_count_metrics($metrics_name,$serviceName,$labelType=[],$siteName,$countNum=1,$biz_parameter=&amp;#39;&amp;#39;){ $ret = array(); $ret[]=$metrics_name; $part2 = &amp;#39;type=&amp;#39;.implode(&amp;#39;.&amp;#39;,$labelType).&amp;#39;&amp;amp;service=&amp;#39;.$serviceName.&amp;#39;&amp;amp;site=&amp;#39;.$siteName; if (!empty($biz_parameter)){ $part2.=&amp;#39;&amp;amp;biz_parameter=&amp;#39;.$biz_parameter; } $ret[]=$part2; $ret[]=$countNum; return $ret; } 3.3 保存数据结构 （消费 $logPacker）（已审查） # 这个是关键的一步，它的作用在于把数据包结构数据进行再一次结构化，变为真正可用的全局数据结构，总体结构如下图：
相关代码模型如下：
private function save_count_metrics_log($logPacker) { $log = implode(&amp;#39;|&amp;#39;, $logPacker) .</description></item><item><title>1.2 使用文档</title><link>https://icorer.com/icorer_docs/doccenter/pulseflow/overviews/1.2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/pulseflow/overviews/1.2/</guid><description>PulseFLow组件 使用文档 # 这篇文档主要进行组件使用方面的介绍。
一. PHP.INI 文件配置参数 # 变量名 INI文件配置对应名称 默认值 含义 enabled PulseFlow.enabled false 是否启用插件？ disable_trace_functions PulseFlow.disable_trace_functions 空字符串 禁止跟踪的函数名列表（逗号分割） disable_trace_class PulseFlow.disable_trace_class 空字符串 禁止跟踪的类名列表（逗号分割） svipc_name PulseFlow.svipc_name /PulseFlow_sv_ipc System V IPC 所需要的文件路径名 svipc_gj_id PulseFlow.svipc_pj_id 1000 System V IPC 所需要的项目ID max_package_size PulseFlow.max_package_size 0 组件内部允许的最大消息队列发包大小，超过这个大小进行分包发送 log_dir PulseFlow.log_dir 空字符串 Plugin Log Dir ( 如果此参数不为空，则开启插件日志记录，目前只会记录必要日志信息 ) sampling_rate PulseFlow.sampling_rate 100 采样率，默认是1/100，根据每次请求进行采样隔离 上面所列的参数并不是都需要一一设置，需要对若干参数进行相关解释：
enabled：这个参数负责控制插件的可用开关，除了【 在php.ini文件中进行设置】 之外， 还可以【 **通过 pulseflow_enable 和*pulseflow_disable 函数进行设置 **】， 还可以【 在url参数中附属get参数 “pulseflowswitch=on” 或 “pulseflowswitch=off”进行选择开关 】。</description></item><item><title>1.2配置解析器</title><link>https://icorer.com/icorer_docs/doccenter/redishub/designs/1.2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/redishub/designs/1.2/</guid><description>1.2 配置解析器设计 # Agent配置器, 主要负责解析来自网络 或者 文件系统中的配置文件,目前提供配置文件解析模块,配置解析器设计主要包括以下部分:
配置信息元素结构. 配置解析器相关解析函数. 配置解析器对外API接口服务,允许动态更新配置. 组成结构图如下: 1.2.1 配置信息元素 # 随着系统功能的不断丰富,系统的配置项目也会越来越多,目前配置解析器主要解析的数据对象包括:
网络配置项 : 针对中间件网络监听进行配置。 redis集群配置项：针对Redis集群进行配置。 日志配置项：目前提供kafka或日志输出，kafka支持公司标准日志。 1.2.2 配置样例 # #RedisHub YAML config file #RedisHub Net Config net: listen_uri: unix:/var/run/redis.sock #Unix Domain Socket的监听路径：PHP推荐使⽤这种模式 # listen_uri: tcp:10.100.183.180:16379 #TCP的监控IP及端⼝ #RedisHub cluster Config cluster: start_nodes:node1,node2,node3 #Redis集群的节点，这⾥可以根据线上实际情况进⾏配置，多个只是为了保障⾼可⽤ conn_timeout: 200 #Redis节点的TCP连接超时时间 （单位：毫秒） conn_read_timeout: 50 #Redis节点的TCP读取超时时间 （单位：毫秒） conn_write_timeout: 50 #Redis节点的TCP写⼊超时时间 （单位：毫秒） conn_alive_timeout: 60 #Redis节点的TCP最⼤空闲时间 （单位：秒） conn_pool_size: 200 #针对每⼀个Redis集群节点的TCP连接池最⼤值 （单位：个） #RedisHub api config api: http_listen_address: #RedisHub log config # log 相关配置 log: # 日否开启日志 enable: true # 日志输出位置，支持std(终端) kafka # 注：std仅在调试时使用 output: &amp;#34;kafka&amp;#34; # kafka server的地址 需要修改到指定环境的kafka kafka_address: [&amp;#34;10.</description></item><item><title>1.2配置解析器</title><link>https://icorer.com/icorer_docs/doccenter/redistun/designs/1.2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/redistun/designs/1.2/</guid><description>1.2 配置解析器设计 # Agent配置器, 主要负责解析来自网络 或者 文件系统中的配置文件,目前提供配置文件解析模块,配置解析器设计主要包括以下部分:
配置信息元素结构. 配置解析器相关解析函数. 配置解析器对外API接口服务,允许动态更新配置. 组成结构图如下: 1.2.1 配置信息元素 # 随着系统功能的不断丰富,系统的配置项目也会越来越多,目前配置解析器主要解析的数据对象包括:
系统通用配置 : 对系统的通用配置进行解析 网络组配置 : 对通信组件中需要使用的redis集群组进行配置 1.2.2 配置样例 # local_unix_common_uri: /home/corerman/DATA/ICODE/GoLang/RedisTunel-go/bin/unix/ api_http_listen_uri: 127.0.0.1:10000 redis_group_list: - server_name: redis-pool1 group_id : 1 is_enable: true local_unix_name: redis1 master_server : 127.0.0.1:6379 master_conn_pool_size:10,20 master_conn_idle_time_out: 200 slave_server : 127.0.0.1:6380,127.0.0.1:6381,127.0.0.1:6382,127.0.0.1:6383 slave_conn_pool_size:30,40 slave_conn_idle_time_out: 200 - server_name: redis-pool2 group_id : 2 is_enable: true local_unix_name: redis2 master_server : 127.0.1.1:6379 master_conn_pool_size:10,20 master_conn_idle_time_out: 200 slave_server : 127.</description></item><item><title>2.3 功能流程</title><link>https://icorer.com/icorer_docs/doccenter/pulseflow/pulgin_designed/2.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/pulseflow/pulgin_designed/2.3/</guid><description/></item><item><title>1.3 AK-FRAME设计-Request Handle设计阐述</title><link>https://icorer.com/icorer_docs/doccenter/ak-2019/designs/1.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/ak-2019/designs/1.3/</guid><description>Request Handle 顾名思义 ,它的主要职责用来承载用户API请求,基于这个包将会衍生出框架的控制器基础类，也可以让当前类成为控制器基础类，控制器基础类将被每个实体业务控制器继承,所以它处在AK-FRAME层面.
所以在AK-FRAME层面,我们有request目录用来存储request相关的类实现文件,配置文件,相关工具包文件.
一. 工作流程组成部分 # 1.1 Request-Handle 模块设计图 # Request-Handle 模块主要包括 请求合法性检测、请求数据体分析、权限校验等模块组成，相关具体的模块设计图如下所示：
二. 相关组件介绍 # 2.1 Request-Handle组件类 # 为了把Request模块统一打包对外服务，所以这里我们需要把Request-Handle组件抽象为一个RequestHandle类，这个类主要包含一些相关模块方法，可以被外部类引用，在请求校验阶段做出贡献。
2.2 请求合法性检测 # 对于网络请求来源复杂，我们首先不能让请求轻易进入消耗计算机资源的环节，所以这部分很关键，但是这部分具有很强的不确定性。因为随着计算机技术的发展，爬虫技术等模拟技术，黑客攻击的升级，这部分可能面临着修改的可能性，因此这部分除了进行基础的请求过滤外，还需要留下相关的扩展函数，便于后期进行调整。
请求合法性检测在实现层是RequestHandle类的一个函数，函数名为checkRequest，这个函数主要完成两部分工作。
路由放行：调用RequestHandle类子函数isRouteIgnore，这个部分主要检查当前请求的控制器和方法是不是在路由忽略列表，如果在列表内，则放过这个请求，这个应用场景主要针对一些权限初始化接口，比如用户登录、获取token 接口。
请求参数校验：调用RequestHandle类子函数checkHeader，这个部分主要对于header头部参数里的一些约定条件进行检测，目前主要包括的参数包括JWT令牌数据、请求来源from参数，这两个检测过程均为调用RequestHandle内部函数。
2.2.1 JWT组件包 # JWT 是通用令牌协议，基于JWT可以做用户安全校验、同时开源社区提供了相关的代码包，可以帮助系统框架快速构建JWT令牌模块。
但是，在安装了JWT包后，我们不能直接使用开源社区的裸包，我们需要在AK-FRAME封装JWT子模块，子模块主要提供生成JWT和解析JWT的代码包，JWT封装层注意封装的用户单元信息不要采用uid，要采用用户名，便于后期做分布式系统，基于用户名的JWT，可以在各个系统之间可以做到统一登录。
校验JWT模块，这个是JWT包中的一个方法，名称为checkJWT，这个函数在RequestHandle类子函数checkHeader中被调用，主要对header头部传输进来的JWT数据做数据段的检验，包括JWT长度，和相关数据段拆分，如果JWT验证成功，则要把拆分后的数据体组成数组返回上一级，便于上一级函数把数据加载进控制器基础类相关属性。
2.2.2 请求参数匹配函数（filterRequestParames方法） # 需要在 RequestHandle类中实现出请求参数匹配函数，这个是一个扩展单元，目前可以在函数内部仅仅做header部分的from参数判断，比如参数值可以为app，web，wechat，如果不在列表，则返回false，由上级接收到返回值后决定是否放行请求，在以后可能会对更多的请求参数进行过滤，这个函数将起到过滤效果。
2.3 请求数据体分析（getRequestData方法） # 如果上面的流程已经顺利通过，那么这个请求在安全程度上已经是合法的了，那么将进行非常重要的两部分操作。
这个方法将调用ak-frame中的request目录下的requestData工具类，
请求数据体抽取：对于request 请求体的相关参数进行抽取，这部分是requestData工具类的实现，这个工具类基于TP5.1的request部分做了一层封装，提供一些基础方法，比如findGetDataByKey,findPostDataByKey等，这层封装既可以满足已经定制化请求数据，还可以降级对于TP框架的耦合度。
检查路由权限：这部分流程则需要检查当前请求所处的路由是够属于前面部分解析的JWT所对应的用户拥有的权限，首先会取出控制器基础类中的用户名，然后去缓存中查询是否有对应的用户权限，如果没有则调用权限包中的权限分析方法对于JWT解析出的用户名进行权限获取，如果已经存在则把缓存权限取出来，这两条线路最终都需要对于当前路由和用户权限列表中进行搜索，如果找到则放行，否则就拒绝访问。</description></item><item><title>1.3 异常监控分析</title><link>https://icorer.com/icorer_docs/doccenter/logdarts/designs/1.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/logdarts/designs/1.3/</guid><description>组件也包含异常监控部分，但是为了减少对于业务代码的影响，在异常监控部分进行了改造：
组件内部通过异常机制进行错误跟踪。 组件和外部调用之间通过错误码进行状态反馈。 组件内部的异常产生主要集中于 初始化配置 和 UDP发送两大部分，目前对这两部分进行了调整。
4.1初始化配置 （已审查） # 初始化配置主要作用是分析配置文件，根据配置文件内容初始化相关的环境参数，配置过程在一个PHP生命期内只会进行一次，这部分代码已经调整为错误码返回，相关的模型代码样例如下：
if (!is_array(self::$EXCEPTION_LIST) || empty(self::$EXCEPTION_LIST[&amp;#39;CLIENT_CONFIG&amp;#39;])) { // throw new \Exception(&amp;#39;Exception List File is Lose&amp;#39;, 1000); //原来采用抛出异常 return FILE_NOT_FOUND_ERR; //现在采用返回错误码 } else { self::$CLIENT_EXCEPTION_LIST = self::$EXCEPTION_LIST[&amp;#39;CLIENT_CONFIG&amp;#39;]; } 这种调整可以有效降低组件代码和业务系统的耦合性。
4.2 UDP发送（已审查） # UDP发送函数内部仍然采用异常机制进行上报异常，但是在组件内部调用UDP发送函数时，如果抓取到异常，会向外层反馈异常错误码，而不是继续抛出异常。
#总结 以上两个部分的代码逻辑已经完全审核。</description></item><item><title>1.3通信组件</title><link>https://icorer.com/icorer_docs/doccenter/redishub/designs/1.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/redishub/designs/1.3/</guid><description> 1.3 通信组件设计 # 通信组件目前不包括协议解析部分,这里的通信组件就是纯粹的网络通信层设计.
1.3.1 通信组件组成部分 # 目前网络通信层分为两部分:
本地UNIX监听组,用于高速的IPC通信 每个UNIX监听组所对应一组远端redis服务器,分别对于主从进行连接池连接. 1.3.1 通信组件链路结构 # RedisHub很重要的是网络代理部分,在网络代理方面由三部分组成.
第一部分是对远程redis集群的连接池. 第二部分是对本地众多php-fpm客户端的UNIX请求连接管理. 第三部分是对这三端之间redis通信协议进行兼容.</description></item><item><title>1.3通信组件</title><link>https://icorer.com/icorer_docs/doccenter/redistun/designs/1.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/redistun/designs/1.3/</guid><description> 1.3 通信组件设计 # 通信组件目前不包括协议解析部分,这里的通信组件就是纯粹的网络通信层设计.
1.3.1 通信组件组成部分 # 目前网络通信层分为两部分:
本地UNIX监听组,用于高速的IPC通信 每个UNIX监听组所对应一组远端redis服务器,分别对于主从进行连接池连接. 1.3.1 通信组件链路结构 # Redis-Tunel很重要的是网络代理部分,在网络代理方面由三部分组成.
第一部分是对远程redis-server的连接池. 第二部分是对本地众多php-fpm客户端的UNIX请求连接管理. 第三部分是对这三端之间redis通信协议进行兼容.</description></item><item><title>1.4 协议解析器与拦截器</title><link>https://icorer.com/icorer_docs/doccenter/redishub/designs/1.4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/redishub/designs/1.4/</guid><description>1.4 协议解析器与拦截器 # 作为网络中间件,我们需要针对网络数据包进行读取之外,还需要对数据包进行解析工作,基于redis协议做了解析之后,我们还需要在解析器的基础上做拦截器,针对不同的redis做不同的处理流程.
1.4.1 协议解析器设计 # 协议解析器,是一个单独的模块,它主要针对网络数据包进行redis协议的解析工作,虽然redis协议具有统一的数据格式,但是还需要对每种协议命令做兼容操作.
1.4.2 协议解析器构成成分 # redis协议解析器 : 主要用来解析redis协议 (decoder) redis协议编码器 : 主要用来组装redis协议 (encoder) 1.4.3 解析器 和 拦截器 的工作流程 配合 # 这两个重要组件的功能流程配合如下:
[PHP-FPM请求] &amp;ndash;&amp;gt;** [RedisHub中间件]** &amp;ndash;&amp;gt; (读取数据包) &amp;ndash;&amp;gt; (解析数据包协议) &amp;ndash;&amp;gt; (对指定命令进行拦截操作) &amp;mdash;&amp;gt; (转发下游redis服务) &amp;ndash;&amp;gt; [下游redis集群] &amp;ndash;&amp;gt; (处理命令并响应) &amp;ndash;&amp;gt; [RedisHub中间件] &amp;mdash;&amp;gt; (响应请求) &amp;mdash;&amp;gt;** [PHP-FPM]**</description></item><item><title>1.4 协议解析器与拦截器</title><link>https://icorer.com/icorer_docs/doccenter/redistun/designs/1.4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/redistun/designs/1.4/</guid><description>1.4 协议解析器与拦截器 # 作为网络中间件,我们需要针对网络数据包进行读取之外,还需要对数据包进行解析工作,基于redis协议做了解析之后,我们还需要在解析器的基础上做拦截器,针对不同的redis做不同的处理流程.
1.4.1 协议解析器设计 # 协议解析器,是一个单独的模块,它主要针对网络数据包进行redis协议的解析工作,虽然redis协议具有统一的数据格式,但是还需要对每种协议命令做兼容操作.
1.4.2 协议解析器构成成分 # redis协议解析器 : 主要用来解析redis协议 (decoder) redis协议编码器 : 主要用来组装redis协议 (encoder) 1.4.3 解析器 和 拦截器 的工作流程 配合 # 这两个重要组件的功能流程配合如下:
[PHP-FPM请求] &amp;ndash;&amp;gt;** [RedisTunel中间件]** &amp;ndash;&amp;gt; (读取数据包) &amp;ndash;&amp;gt; (解析数据包协议) &amp;ndash;&amp;gt; (对指定命令进行拦截操作) &amp;mdash;&amp;gt; (转发下游redis服务) &amp;ndash;&amp;gt; [下游redis服务] &amp;ndash;&amp;gt; (处理命令并响应) &amp;ndash;&amp;gt; [RedisTunel中间件] &amp;mdash;&amp;gt; (响应请求) &amp;mdash;&amp;gt;** [PHP-FPM]**</description></item><item><title>1.4 权限设计-最小操作与功能单元</title><link>https://icorer.com/icorer_docs/doccenter/ak-2019/designs/1.4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/ak-2019/designs/1.4/</guid><description>在设计统一权限系统之前,我们需要思考第一个问题,在系统权限层次上,到底哪些部分是实体,哪些部分是虚体? 比如你去公司上班,公司具有门禁系统,你需要刷卡入门,假设你需要穿过5道门,想一下在这些动作中,是如何归并你的权限范围的.
在这些门禁中,都相当于一个操作,每个操作都有不同的标识符,你拥有的标识符越多,你就拥有越多的权限. 现在思考一下目前操作系统中比较流行的RBAC或者基于用户权限这种比较流行的权限系统,都是在不断的给用户赋予标识符,所以我们的新权限系统中首先需要思考第一个问题,我们系统中最小的操作实体是什么?
一. 最小操作单元 # 最小操作单元,顾名思义就是系统最小能够对外提供服务的功能元素,我们是API后台系统,所以针对新版系统,最小操作单元就是一个个API,这是系统的最小控制力度.
最小操作单元在数据表存储为一张单表,单表必须存在下面相关字段:
id : 序号 name : 最小操作单元名称(必须英文,以后应对分布式) name_comment : (name英文所对应的中文) module : API的module部分 controller : API的控制器名称 method : API的方法名称 comment : 描述 二. 最小功能单元 # 最小操作单元是孤零零的API,这是系统的最小实体,但是这个力度太小,所以不能成为养老服务库中的功能单元,所以我们还需要在最小操作单元的基础上聚合成一个个最小功能单元,最小功能单元组装成服务库.
系统功能单元，就是最小操作单元的聚合体，在数据存储结构上也是一张单表,单表必须存在下面相关字段:
id : 序号 name : 功能名称 (必须英文,以后应对分布式) name_comment: (name英文所对应的中文) ids : 最小操作单元的id集合(逗号分割) ids_name : ids所对应的最小操作单元英文名称列表(逗号分割,以后应对分布式) comment : 功能单元描述. 三. 两者间关系 # 下图描述最小功能单元与最小操作单元间关系.
下面以老人管理功能为例。</description></item><item><title>1.5 NetHandle组件</title><link>https://icorer.com/icorer_docs/doccenter/redishub/designs/1.5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/redishub/designs/1.5/</guid><description>NetHandle # 这是一个库,方便构建高性能TCP服务端应用程序,站在Go语言的巨人肩膀上
项目地址: uriModule/NetHandle
一. 特点 # 高性能,低资源消耗 非常简单易用的开发接口 支持众多协议,TCP,UDP,UNIX 二. 安装 # go get -u moduleUri/NetHandle
三. 性能测试: # 3.1 50*10000 (50线程 X 10000请求) # 3.2 50*20000 (50线程 X 20000请求) # 3.3 100*10000 (100线程 X 10000请求) # 四. 样例代码: # 使用这个库的时候,只需要自定义简单的回调函数,即可构造出性能强悍的网络监听.
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;moduleUri/NetHandle&amp;#34; &amp;#34;log&amp;#34; &amp;#34;sync&amp;#34; ) var addrTcp = &amp;#34;127.0.0.1:10000&amp;#34; func main() { log.SetFlags(log.Lshortfile | log.LstdFlags) var mu sync.RWMutex count := 0 go log.</description></item><item><title>1.5 NetHandle组件</title><link>https://icorer.com/icorer_docs/doccenter/redistun/designs/1.5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/redistun/designs/1.5/</guid><description>NetHandle # 这是一个库,方便构建高性能TCP服务端应用程序,站在Go语言的巨人肩膀上
项目地址: uriModule/NetHandle
一. 特点 # 高性能,低资源消耗 非常简单易用的开发接口 支持众多协议,TCP,UDP,UNIX 二. 安装 # go get -u moduleUri/NetHandle
三. 性能测试: # 3.1 50*10000 (50线程 X 10000请求) # 3.2 50*20000 (50线程 X 20000请求) # 3.3 100*10000 (100线程 X 10000请求) # 四. 样例代码: # 使用这个库的时候,只需要自定义简单的回调函数,即可构造出性能强悍的网络监听.
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;moduleUri/NetHandle&amp;#34; &amp;#34;log&amp;#34; &amp;#34;sync&amp;#34; ) var addrTcp = &amp;#34;127.0.0.1:10000&amp;#34; func main() { log.SetFlags(log.Lshortfile | log.LstdFlags) var mu sync.RWMutex count := 0 go log.</description></item><item><title>1.5 权限设计-系统结构设计</title><link>https://icorer.com/icorer_docs/doccenter/ak-2019/designs/1.5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/ak-2019/designs/1.5/</guid><description> 系统结构设计 # 一. 系统总体结构图 # 二. 系统 # 目标：构建一个千变万化的系统结构。 首先系统和目录是虚拟的，可以随意构造。通过选取功能库中的功能，来建立不同的系统。
系统在数据表存储为一张单表,单表必须存在下面相关字段:
id : 序号 name : 系统名称 comment : 描述 三. 目录(功能) # 功能菜单不在是之前的三级权限，功能可以停止在任意目录级别, 根据type进行类别判断。当type为func时，此目录为功能层。
目录（功能），在数据存储结构上也是一张单表,单表必须存在下面相关字段:
id : 序号 system_id : 系统id name: 目录名称 par_id : 上级目录id type : 目录类别 （dir-目录、func-功能） comment : 功能单元描述. 四. 系统结构构建流程 # 下图描述系统结构的关联：</description></item><item><title>1.6 哈希分操器组件</title><link>https://icorer.com/icorer_docs/doccenter/redistun/designs/1.6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/redistun/designs/1.6/</guid><description>背景描述: # 哈希分槽器,顾名思义,它的主要工作就是根据redis协议中的key值进行哈希计算,并选择相关的存储节点,在不同的节点上完成redis数据的读写操作.
通过上面的描述,我们可以看出,哈希分槽器主要的设计部分包括如下:
数据分槽器 : 基于一致性哈希算法,负责key值的落槽工作,每个槽对应一个redis group 单元. 哈希结构及算法 : 需要减少节点添加删除造成的缓存失效问题,所以采用一致性哈希算法. 一. 数据分槽器(Slots) # 在RedTun设计下, 数据分槽器属于Neter的一部分,主要是面向网络组进行服务,数据分槽器前后沟通了一致性哈希算法,服务器group节点,redis客户端请求这三方,是用户的请求可以通过一致性哈希算法准确落到指定的redis group内,响应的group负责读写分离.
1.1 用户数据分槽流程 # 1.2 分槽器实现 # 为了兼容线上环境,分槽器目前的一致性哈希算法实现高度参考predis的hashring,采用crc32 IEEE作为hash的值计算算法,采用uint32作为hash环的大小.
1.3 算法兼容性测试 # 为了保障RedTun的一致性哈希算法 和 线上环境predis的一致性哈希算法一致,避免缓存大量失效的情况,目前我们针对这两个算法实现做了单元测试:
测试总量: **8529820次 ** 随机 key 的哈希生成与结果匹配.
测试异常: 0次
总共进行了800多万次测试,两个语言的算法实现没有出现差异结果,说明RedTun内部的一致性哈希算法已经和线上高度一致,不会造成失效问题.
1.4 一致性哈希的相关数据结构优化 # 1.4.1 哈希环的hash key选择 # 一致性哈希中,每个key的稳定性决定了哈希环上节点位置的稳定性,所以,在RedTun中,对于hash key的选择没有粗略的选择 IP:PORT , 而是在用户配置区间为每个GROUP提供了一个名字叫做&amp;quot;hash_ring_key&amp;quot; , 根据这个字段内的数据进行哈希环的构造.
二 . 哈希结构及算法 # 现在我们需要设计一个哈希结构,这个哈希结构能够把各个redis group节点映射上来,并且这个哈希结构具有较高的稳定性,当添加或者删除相关的group节点时,不会造成哈希映射的大规模失效.在上述的需求下,我们选择了一致性哈希这个算法.
2.1 一致性哈希相关解释 # 关于一致性哈希的描述,各处都有比较完善的文章,下面主要摘抄部分来阐述一致性哈希的关键点.
其实，⼀致性哈希算法也是使⽤取模的⽅法，只是，刚才描述的取模法是对服务器的数量进⾏取模，⽽⼀致性哈希算法是对2^32取模.⾸先，我们把⼆的三⼗⼆次⽅想象成⼀个圆，就像钟表⼀样，钟表的圆可以理解成由60个点组成的圆，⽽此处我们把这个圆想象成由2^32个点组成的圆，⽰意图如下:
圆环的正上⽅的点代表0，0点右侧的第⼀个点代表1，以此类推，2、3、4、5、6……直到2^32-1,也就是说0点左侧的第⼀个点代表2^32-1,我们把这个由2的32次⽅个点组成的圆环称为hash环,假设我们有3台缓存服务器，服务器A、服务器B、服务器C，那么这三台服务器肯定有⾃⼰的IP地址，我们使⽤它们各⾃的IP地址进⾏哈希计算，使⽤哈希后的结果对2^32取模，可以使⽤如下公式⽰意。 hash（服务器A的IP地址） % 2^32</description></item><item><title>1.6 权限设计-基于Plan的权限方案设计</title><link>https://icorer.com/icorer_docs/doccenter/ak-2019/designs/1.6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/ak-2019/designs/1.6/</guid><description>基于Plan的权限方案设计 # 一. Plan的结构组成 # 权限Plan是基于构造出来的系统结构，基于系统模板，构造出一个个不同的权限Plan，具体的Plan构造方式如下。
二. Plan数据结构设计 # 为了有结构的保存用户Plan权限，我们需要一张单独的数据表，这张数据表主要包括以下几个字段：
id : 序号 plan_name: paln名称 plan_json : 基于系统目录结构构造的Plan json，用于web端或其他来展示。 ids : 操作单元的ids，用来判断用户权限。 数据结构样例解析如下: # 为了方便前端展示，我们把plan的数据结构分为两种模式存储，json的格式大致为 {&amp;ldquo;系统&amp;rdquo;:{&amp;ldquo;一级目录1&amp;rdquo;:{&amp;ldquo;二级目录1&amp;rdquo;:[&amp;ldquo;功能1&amp;rdquo;]},&amp;ldquo;一级目录2&amp;rdquo;:{&amp;ldquo;二级目录2&amp;rdquo;:[&amp;ldquo;功能2&amp;rdquo;]}}}
为了方便api对于权限进行判断，我们对plan所拥有的api权限，使用操作单元的ids进行存储，这层可用来对于用户权限快速查询.
这部分功能单元部分 还需要把下属的操作单元ids包括进来，把权限力度降到最低。
三. Plan相关功能包 # 上面阐述了Plan相关的数据结构设计，在相关的数据结构基础上，还需要一个Plan权限操作包，操作包中包含下面方法：
校验路由权限： module ， controller ， method 是否属于用户plan范围内
获取指定Plan的数据结构：数组结构
存储Plan数据结构
3.1 权限校验功能 # 这部分需要检查当前请求的路由是否属于用户拥有的权限，首先应该去缓存中获取用户的权限信息，如果没有，则需要进行权限获取。取得用户权限之后，需要对于当前的路由和用户的权限进行比对，如果成功，则放行，否则将无权访问。</description></item><item><title>1.6 集群 MSET 指令支持</title><link>https://icorer.com/icorer_docs/doccenter/redishub/designs/1.6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/redishub/designs/1.6/</guid><description> 集群 MSET 指令支持 #</description></item><item><title>1.7 集群 MGET 指令支持</title><link>https://icorer.com/icorer_docs/doccenter/redishub/designs/1.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/redishub/designs/1.7/</guid><description>1.7 集群 MGET 指令支持 # 业务系统为了提高多个key的数据获取吞吐，经常会采用mget指令，这个指令在单实例模式的redis场景下能够完美支持，但是redis标准集群不支持跨槽位执行mget指令。
但是mget针对业务环境是大量使用的，所以中间件必须完成mget指令在集群中的命令支持。
1.7.1 指令转换 # 由于Redis不支持跨槽位执行mget指令，因此我们可以变相思维，总体的指令转换如下：
针对MGET指令的keys进行拆分。 对keys进行hash计算 =&amp;gt; 选择key所对应的node 。 针对node组上的指令进行并发 pipline命令发送。 聚合各个并发线程的指令结果，把远端redis集群内部的数据返回给业务调用方。 1.7.2 MGET指令设计图 # 针对MGET的具体工作情况，我这边绘制了一个图，说明MGET的具体工作原理，红色线路代表一次完整的MGET执行周期。 从上面的图形可以看出，中间件接受到MGET请求后，会把指令中的KYES进行hash计算、并结合node信息选择数据存储的node，针对每个node进行进行pipeline 指令流水吞吐、保障单node下的吞吐高性能，针对不同的node进行并发执行，通过并发技术提高MGET在集群环境下的整体响应速度。</description></item><item><title>1.9 Redis集群状态更新</title><link>https://icorer.com/icorer_docs/doccenter/redishub/designs/1.8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/redishub/designs/1.8/</guid><description>1.9 Redis集群状态更新 # RedisHub中间件除了要沟通客户端 与 服务端 这两方，还需要及时获取Redis集群的状态信息，并把状态信息转换或更新必要的内存数据结构，内存数据结构最终会被中间件用来承载redis请求。
1.9.1 状态信息来源 # 集群状态信息的来源主要包括：
被动方式：集群内部指令执行周期内的MOVE、ASK信号 主动方式：集群 CLUSTER SLOTS 指令 1.9.2 集群槽位状态信息更新 # 关于集群槽位的信息更新，我们主要包括以下两方面策略：
为了具备更好的性能，我们采用chan 共享内存监听 采用读写锁，提高关键内存共享区的读写安全性及性能 针对更新操作做了秒级限流操作，保障中间件的稳定性。 核心源码分析 如下：
func (cluster *Cluster) handleUpdate() { for { //获取chan列表的更新信号 msg := &amp;lt;-cluster.updateList // TODO: control update frequency by updateTime and movedTime? cluster.rwLock.RLock() clusterLastUpdateTime := cluster.updateTime cluster.rwLock.RUnlock() //如果集群的上一次更新时间 加上窗口值（1s） 小于 此次集群更新指令产生的时间: 证明集群更新频率过高，控制频率。 if clusterLastUpdateTime.Add(1 * time.Second).Before(msg.movedTime) { //针对集群进行状态更新 err := cluster.Update(msg.node) if err != nil { log.</description></item><item><title>1.8 TCP连接池</title><link>https://icorer.com/icorer_docs/doccenter/redishub/designs/1.9/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/redishub/designs/1.9/</guid><description>1.8 TCP连接池 # 1.8.1 连接池是什么 # 我们常见的池很多，比如内存池，线程池，对象池，连接池等。顾名思义，池子干的事情都是一样的，把一类相同的事物放到一个池里面，已备不时之需，好比我们的蓄水池一样，把平日多余的水储蓄起来，一方面防止洪水到来时候对下游造成洪涝灾害，另一方面还可以合理灌溉资源利用，比如还可以水力发电。同样连接池是把已经已经建立好的连接放入一个池子，当请求到来可以直接拿来使用，这样就即解决了频繁的创建关闭连接带来的开销，也保护了后端服务，防止同时有大量连接涌入，造成危害。
1.8.2 连接池的种类 # 其实也就是连接池的使用场景
可以是一个独立部署的服务，通过套接字提供代理服务。例如我们的常用的dbproxy。
可以是一个服务内部进程间共享的连接池，这种相对更加轻量，可以理解为项目级别，只对内提供服务。
进程内的连接池，更加轻量，当前进程内的线程或者协程可以使用。
RedisHub 实现的连接池就是 进程内的连接池，使用连接池有以下好处：
减少客户端使用连接时，创建和销毁连接的时间和系统资源开销，这里涉及到TCP的三次握手也四次挥手，还有TCP的慢启动预热。 避免极端情况大量连接直接涌入后端服务，对整个系统服务造成危害。 但同时也有一些缺点，比如空闲状态下也要维护一定数量的连接，占用客户端和服务端的资源，这里可以根据实际需求动态调配连接数，达到效率和资源利用的平衡。哪有一点资源不占用，还想系统高效稳定的事情，建个水坝还得占片地，护坝人间断性的职守呢。
1.8.3 TCP连接池初始化方式 # TCP连接池的最终目标就是对程序体内部需要使用的TCP连接进行池化管理，连接不够使用时自动扩容、连接过剩的时候能够自动回收，所以 我们首先需要考虑TCP连接池的初始化方式。连接池的初始化方式主要包括如下两种：
当请求到来的时候，尝试从连接池中获取连接对象，如果连接池为空，创建连接对象，请求结束的时候，归还至连接池.
进程启动的时候，创建固定数量的连接对象，当请求到来的时候，尝试从连接池中获取连接对象，如果连接池为空，继续等待或者服务降级; 不为空的话正常服务，请求结束的时候，归还至连接池.
RedisHub 中间件的TCP连接池初始化方式选择第一种。针对第二种连接池的实现方案，可以查阅本人另外一个项目RedisTun。
1.8.4 连接池源码分析 - 获取一个可用链接 # func (node *redisNode) getConn() (*redisConn, error) { //需要针对当前的redis-node的tcp连接池进行内存操作，在并发场景下，首先先上锁。 node.mutex.Lock() //如果当前node已经进入不可用状态。 if node.closed { node.mutex.Unlock() return nil, fmt.Errorf(&amp;#34;getConn: connection has been closed&amp;#34;) } //从TCP连接池中清理陈旧的TCP连接，这里面使用了LIST数据结构，可以把陈旧连接进行归并、一并处理。 //如果连接远程node节点时候设置了TCP连接存活时间 则 进行检验。 if node.aliveTime &amp;gt; 0 { for { //从list中选择一个元素，如果conns列表为空 则跳出检查 elem := node.</description></item><item><title>1.10 RESP协议解析</title><link>https://icorer.com/icorer_docs/doccenter/redishub/designs/1.10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://icorer.com/icorer_docs/doccenter/redishub/designs/1.10/</guid><description>1.10 RESP协议解析 # 1.10.1 RESP协议介绍 # Redis 协议在以下三个目标之间进行折中：
易于实现 可以高效地被计算机分析（parse） 可以很容易地被人类读懂 1.10.2 请求 # Redis 服务器接受命令以及命令的参数。
服务器会在接到命令之后，对命令进行处理，并将命令的回复传送回客户端。
1.10.3 回复 # Redis 命令会返回多种不同类型的回复。
通过检查服务器发回数据的第一个字节， 可以确定这个回复是什么类型：
状态回复（status reply）的第一个字节是 &amp;ldquo;+&amp;rdquo;
错误回复（error reply）的第一个字节是 &amp;ldquo;-&amp;rdquo;
整数回复（integer reply）的第一个字节是 &amp;ldquo;:&amp;rdquo;
批量回复（bulk reply）的第一个字节是 &amp;ldquo;$&amp;rdquo;
多条批量回复（multi bulk reply）的第一个字节是 &amp;ldquo;*&amp;rdquo;
1.10.4 状态回复 # 一个状态回复（或者单行回复，single line reply）是一段以 &amp;ldquo;+&amp;rdquo; 开始、 &amp;ldquo;\r\n&amp;rdquo; 结尾的单行字符串。
以下是一个状态回复的例子：
+OK
客户端库应该返回 &amp;ldquo;+&amp;rdquo; 号之后的所有内容。 比如在在上面的这个例子中， 客户端就应该返回字符串 &amp;ldquo;OK&amp;rdquo; 。
状态回复通常由那些不需要返回数据的命令返回，这种回复不是二进制安全的，它也不能包含新行。
状态回复的额外开销非常少，只需要三个字节（开头的 &amp;ldquo;+&amp;rdquo; 和结尾的 CRLF）。
1.10.5 错误回复 # 错误回复和状态回复非常相似， 它们之间的唯一区别是， 错误回复的第一个字节是 &amp;ldquo;-&amp;rdquo; ， 而状态回复的第一个字节是 &amp;quot;+&amp;quot; 。</description></item></channel></rss>